import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { AlertTriangle, CheckCircle, Clock, Download, FileText, Send, UserCheck, Eye, Bell } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface Alert {
  id: string;
  type: 'Red Flag' | 'AI Insight' | 'System';
  title: string;
  property: string;
  triggeredDate: string;
  status: 'Awaiting PM Response' | 'Resolved' | 'Escalated' | 'Dismissed';
  timeRemaining?: string;
  description?: string;
  isRead: boolean;
  severity: 'critical' | 'warning' | 'info';
}

const AlertsNotifications = () => {
  const [typeFilter, setTypeFilter] = useState('all');
  const [propertyFilter, setPropertyFilter] = useState('all');
  const [statusFilter, setStatusFilter] = useState('unread');
  const { toast } = useToast();

  const alerts: Alert[] = [
    {
      id: '1',
      type: 'Red Flag',
      title: 'Occupancy Dropped Below 85%',
      property: 'Greenview Apts',
      triggeredDate: '3 days ago',
      status: 'Awaiting PM Response',
      timeRemaining: '72 h remaining to resolve',
      description: 'Occupancy has fallen below critical threshold',
      isRead: false,
      severity: 'critical'
    },
    {
      id: '2',
      type: 'AI Insight',
      title: 'Preleased Volume is trending below average',
      property: 'Harbor View',
      triggeredDate: '1 day ago',
      status: 'Resolved',
      description: 'Auto-generated by AI',
      isRead: true,
      severity: 'warning'
    },
    {
      id: '3',
      type: 'System',
      title: 'Weekly sync completed for 3 properties',
      property: 'Multiple',
      triggeredDate: '2 hours ago',
      status: 'Dismissed',
      description: 'System notification',
      isRead: false,
      severity: 'info'
    }
  ];

  const filteredAlerts = alerts.filter(alert => {
    if (typeFilter !== 'all' && alert.type !== typeFilter) return false;
    if (propertyFilter !== 'all' && alert.property !== propertyFilter) return false;
    if (statusFilter === 'unread' && alert.isRead) return false;
    if (statusFilter === 'read' && !alert.isRead) return false;
    return true;
  });

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'Red Flag':
        return <AlertTriangle className="h-4 w-4 text-red-600" />;
      case 'AI Insight':
        return <div className="bg-yellow-500 text-white rounded px-2 py-1 text-xs font-bold">AI</div>;
      case 'System':
        return <CheckCircle className="h-4 w-4 text-green-600" />;
      default:
        return <Bell className="h-4 w-4 text-gray-600" />;
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'Awaiting PM Response':
        return <Badge className="bg-yellow-500 text-white">Awaiting PM Response</Badge>;
      case 'Resolved':
        return <Badge className="bg-green-100 text-green-800">✓ Resolved</Badge>;
      case 'Escalated':
        return <Badge className="bg-red-100 text-red-800">Escalated</Badge>;
      case 'Dismissed':
        return <Badge className="bg-gray-100 text-gray-800">Dismissed</Badge>;
      default:
        return null;
    }
  };

  const handleAction = (action: string, alertId: string) => {
    toast({
      title: "Action Performed",
      description: `${action} action completed for alert ${alertId}`,
    });
    console.log(`${action} for alert ${alertId}`);
  };

  const handleMarkAllAsRead = () => {
    toast({
      title: "All Alerts Marked as Read",
      description: "All notifications have been marked as read",
    });
  };

  const handleExportLog = () => {
    toast({
      title: "Export Started",
      description: "Alerts log export has been initiated",
    });
  };

  const unreadCount = alerts.filter(alert => !alert.isRead).length;
  const redFlagCount = alerts.filter(alert => alert.type === 'Red Flag').length;
  const aiInsightCount = alerts.filter(alert => alert.type === 'AI Insight').length;
  const systemCount = alerts.filter(alert => alert.type === 'System').length;

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto p-6 space-y-6">
        {/* Header */}
        <div className="bg-white p-6 rounded-lg shadow-sm">
          <h1 className="text-3xl font-bold text-black">Alerts & Notifications</h1>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Left Panel - Filters */}
          <div className="lg:col-span-1">
            <Card className="shadow-sm">
              <CardHeader>
                <CardTitle className="text-lg">Filters</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <label className="text-sm font-medium text-black mb-2 block">Type</label>
                  <Select value={typeFilter} onValueChange={setTypeFilter}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All</SelectItem>
                      <SelectItem value="Red Flag">Red Flag</SelectItem>
                      <SelectItem value="AI Insight">AI Insight</SelectItem>
                      <SelectItem value="System">System</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <label className="text-sm font-medium text-black mb-2 block">Property</label>
                  <Select value={propertyFilter} onValueChange={setPropertyFilter}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">Property</SelectItem>
                      <SelectItem value="Greenview Apts">Greenview Apts</SelectItem>
                      <SelectItem value="Harbor View">Harbor View</SelectItem>
                      <SelectItem value="Multiple">Multiple</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <label className="text-sm font-medium text-black mb-2 block">Status</label>
                  <Select value={statusFilter} onValueChange={setStatusFilter}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="unread">Unread</SelectItem>
                      <SelectItem value="read">Read</SelectItem>
                      <SelectItem value="all">All</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="pt-4 space-y-2 border-t">
                  <div className="flex justify-between text-sm">
                    <span>Critical Alerts</span>
                    <span className="font-medium">4</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>PM Response</span>
                    <span className="font-medium">92%</span>
                  </div>
                  <div className="pt-2">
                    <p className="text-sm font-medium">Last Auto-Sync</p>
                    <p className="text-sm text-gray-600">2 hours ago</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Center Panel - Alerts List */}
          <div className="lg:col-span-2 space-y-4">
            {/* Action Buttons */}
            <div className="flex flex-wrap gap-3">
              <Button variant="outline" onClick={handleMarkAllAsRead}>
                Mark All as Read
              </Button>
              <Button variant="outline" onClick={handleExportLog}>
                <Download className="h-4 w-4 mr-2" />
                Export Alerts Log
              </Button>
              <Button variant="outline">
                View Escalated Only
              </Button>
            </div>

            {/* Alerts List */}
            <div className="space-y-4">
              {filteredAlerts.map((alert) => (
                <Card key={alert.id} className="shadow-sm">
                  <CardContent className="p-6">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex items-center space-x-3">
                        {getTypeIcon(alert.type)}
                        <div>
                          <h3 className="font-semibold text-lg text-black">{alert.title}</h3>
                          <p className="text-sm text-gray-600">
                            {alert.property} • Triggered {alert.triggeredDate}
                          </p>
                        </div>
                      </div>
                      {!alert.isRead && (
                        <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                      )}
                    </div>

                    <div className="mb-4">
                      {getStatusBadge(alert.status)}
                      {alert.timeRemaining && (
                        <p className="text-sm text-gray-600 mt-2">{alert.timeRemaining}</p>
                      )}
                    </div>

                    {alert.type === 'AI Insight' && alert.status === 'Resolved' && (
                      <div className="bg-yellow-100 border border-yellow-200 p-3 rounded mb-4">
                        <p className="text-sm text-yellow-800">Notify PMs of unresolved alerts after 72 hours</p>
                      </div>
                    )}

                    <div className="flex space-x-2">
                      {alert.status === 'Awaiting PM Response' && (
                        <>
                          <Button 
                            size="sm" 
                            onClick={() => handleAction('Send to PM', alert.id)}
                            className="bg-blue-600 hover:bg-blue-700"
                          >
                            Send to PM
                          </Button>
                          <Button 
                            variant="outline" 
                            size="sm" 
                            onClick={() => handleAction('Snooze', alert.id)}
                          >
                            <Clock className="h-4 w-4 mr-1" />
                            Snooze
                          </Button>
                          <Button 
                            variant="outline" 
                            size="sm" 
                            onClick={() => handleAction('Assign Task', alert.id)}
                          >
                            Assign Task
                          </Button>
                          <Button 
                            variant="outline" 
                            size="sm" 
                            onClick={() => handleAction('Mark as Read', alert.id)}
                          >
                            Mark as Read
                          </Button>
                        </>
                      )}
                      {alert.status === 'Resolved' && (
                        <>
                          <Button 
                            size="sm" 
                            onClick={() => handleAction('Send to PM', alert.id)}
                            className="bg-blue-600 hover:bg-blue-700"
                          >
                            Send to PM
                          </Button>
                          <Button 
                            variant="outline" 
                            size="sm" 
                            onClick={() => handleAction('Snooze', alert.id)}
                          >
                            <Clock className="h-4 w-4 mr-1" />
                            Snooze
                          </Button>
                          <Button 
                            variant="outline" 
                            size="sm" 
                            onClick={() => handleAction('Assign Task', alert.id)}
                          >
                            Assign Task
                          </Button>
                          <Button 
                            variant="outline" 
                            size="sm" 
                            onClick={() => handleAction('Mark as Read', alert.id)}
                          >
                            Mark as Read
                          </Button>
                        </>
                      )}
                      {alert.status === 'Dismissed' && (
                        <>
                          <Button 
                            variant="outline" 
                            size="sm" 
                            onClick={() => handleAction('View Logs', alert.id)}
                            className="text-blue-600 border-blue-600 hover:bg-blue-50"
                          >
                            View Logs
                          </Button>
                          <Button 
                            variant="outline" 
                            size="sm" 
                            onClick={() => handleAction('Dismiss', alert.id)}
                          >
                            Dismiss
                          </Button>
                        </>
                      )}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>

          {/* Right Panel - AI Summary */}
          <div className="lg:col-span-1">
            <Card className="shadow-sm">
              <CardHeader>
                <CardTitle className="text-lg">AI Summary</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <p className="text-sm text-gray-700">
                    Top 3 urgent flags this week: Vacancy, Delinquency, Expense
                  </p>
                </div>

                <div className="space-y-2">
                  <p className="text-sm font-medium">{unreadCount} Unread Alerts</p>
                  <div className="space-y-1 text-sm">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                        <span>Red Flag</span>
                      </div>
                      <span>{redFlagCount}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                        <span>AI Insight</span>
                      </div>
                      <span>{aiInsightCount}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                        <span>System</span>
                      </div>
                      <span>{systemCount}</span>
                    </div>
                  </div>
                </div>

                <div className="border-t pt-4">
                  <p className="text-sm font-medium mb-2">Escalation Warning</p>
                  <div className="flex items-center space-x-2 text-sm">
                    <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                    <span>2 Delinquency Flags escalate in 4h</span>
                  </div>
                </div>

                <Button 
                  variant="outline" 
                  className="w-full text-blue-600 border-blue-600 hover:bg-blue-50"
                >
                  Manage Escalation Rules
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AlertsNotifications;
